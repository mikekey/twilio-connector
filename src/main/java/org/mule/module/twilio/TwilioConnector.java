/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.twilio;

import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

/**
 * You can use your master Twilio Account credentials (AccountSid and AuthToken) to access Twilio's REST API for
 * your master account as well as any of your subaccounts. You may also use a subaccount's AccountSid and AuthToken
 * to access the resources of that subaccount.
 * You can not use a subaccount's credentials to access the resources of your master Twilio account or any other
 * subaccounts.
 */
@Connector(namespacePrefix = "twilio")
public class TwilioConnector implements Initialisable {

    @Property
    private String accountSid;
    @Property
    private String authToken;

    private TwilioClient twilioClient;

    @Override
    public void initialise() throws InitialisationException {
        twilioClient = new TwilioClient(accountSid, authToken);
    }

    /**
     * Returns a representation of an account.
     * <p/>
     * An Account resource is represented by the following properties:
     * <p/>
     * Property	        Description
     * Sid	            A 34 character string that uniquely identifies this account.
     * DateCreated	    The date that this account was created, in GMT in RFC 2822 format
     * DateUpdated	    The date that this account was last updated, in GMT in RFC 2822 format.
     * FriendlyName	    A human readable description of this account, up to 64 characters long. By default the
     * FriendlyName is your email address.
     * Status	        The status of this account. Usually active, but can be suspended if you've been bad, or closed if you've been horrible.
     * AuthToken	    The authorization token for this account. This token should be kept a secret, so no sharing.
     * Uri	            The URI for this resource, relative to https://api.twilio.com.
     * SubresourceUris	The list of subresources under this account.
     *
     * @param accountSid the account sid for which to get the details, leave empty to use to use {@link TwilioConnector#accountSid}
     * @return a representation of the account
     */
    @Operation
    public String getAccountDetails(@Parameter(optional = true) String accountSid) {
        return twilioClient.getAccountDetails(accountSid);
    }

    /**
     * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will
     * include that Account as well.
     * <p/>
     * An Account resource is represented by the following properties:
     * <p/>
     * Property	        Description
     * Sid	            A 34 character string that uniquely identifies this account.
     * DateCreated	    The date that this account was created, in GMT in RFC 2822 format
     * DateUpdated	    The date that this account was last updated, in GMT in RFC 2822 format.
     * FriendlyName	    A human readable description of this account, up to 64 characters long. By default the
     * FriendlyName is your email address.
     * Status	        The status of this account. Usually active, but can be suspended if you've been bad, or closed
     * if you've been horrible.
     * AuthToken	    The authorization token for this account. This token should be kept a secret, so no sharing.
     * Uri	            The URI for this resource, relative to https://api.twilio.com.
     * SubresourceUris	The list of subresources under this account.
     *
     * @param accountStatus Only return Account resources with the given status. Can be closed, suspended or active.
     * @param friendlyName  Only return the Account resources with friendly names that exactly match this name.
     * @return a list of the Account resources belonging to the account used to make the API request. This list will
     *         include that Account as well.
     */
    @Operation
    public String getAllAccountsDetails(@Parameter(optional = true) AccountStatus accountStatus,
                                        @Parameter(optional = true) String friendlyName) {
        return twilioClient.getAllAcountsDetails(friendlyName, accountStatus);
    }

    /**
     * Allows you to modify the properties of an account.
     * <p/>
     * An Account resource is represented by the following properties:
     * <p/>
     * Sid	            A 34 character string that uniquely identifies this account.
     * DateCreated	    The date that this account was created, in GMT in RFC 2822 format
     * DateUpdated	    The date that this account was last updated, in GMT in RFC 2822 format.
     * FriendlyName	    A human readable description of this account, up to 64 characters long. By default the
     * FriendlyName is your email address.
     * Status	        The status of this account. Usually active, but can be suspended if you've been bad, or closed
     * if you've been horrible.
     * AuthToken	    The authorization token for this account. This token should be kept a secret, so no sharing.
     * Uri	            The URI for this resource, relative to https://api.twilio.com.
     * SubresourceUris	The list of subresources under this account.
     *
     * @param accountSid    the account sid to use, leave empty to use {@link TwilioConnector#accountSid}
     * @param accountStatus Alter the status of this account: use closed to irreversibly close this account, suspended to temporarily suspend it, or active to reactivate it.
     * @param friendlyName  Update the human-readable description of this account.
     * @return a representation of the account
     */
    @Operation
    public String updateAccount(@Parameter(optional = true) String accountSid,
                                @Parameter(optional = true) AccountStatus accountStatus,
                                @Parameter(optional = true) String friendlyName) {
        return twilioClient.changeAccountStatus(accountSid, accountStatus, friendlyName);
    }

    /**
     * Creates a new subaccount.
     * <p/>
     * Subaccounts in Twilio are just accounts that are "owned" by another account. Using a subaccount you can segment
     * each of your customers' use of Twilio and keep it separate from all the rest, allowing you to easily manage the
     * activity and resources of each customer independently.
     * <p/>
     * For instance, if you are running a hosted service that relies on Twilio you can create a Twilio subaccount for
     * each customer that signs up. Then if a customer closes his or her account with your service, you can simply
     * deactivate the associated Twilio subaccount.
     * <p/>
     * An Account resource is represented by the following properties:
     * <p/>
     * Sid	            A 34 character string that uniquely identifies this account.
     * DateCreated	    The date that this account was created, in GMT in RFC 2822 format
     * DateUpdated	    The date that this account was last updated, in GMT in RFC 2822 format.
     * FriendlyName	    A human readable description of this account, up to 64 characters long. By default the
     * FriendlyName is your email address.
     * Status	        The status of this account. Usually active, but can be suspended if you've been bad, or closed
     * if you've been horrible.
     * AuthToken	    The authorization token for this account. This token should be kept a secret, so no sharing.
     * Uri	            The URI for this resource, relative to https://api.twilio.com.
     * SubresourceUris	The list of subresources under this account.
     *
     * @param friendlyName A human readable description of the new subaccount, up to 64 characters. Defaults to "SubAccount Created at {YYYY-MM-DD HH:MM meridiam}".
     * @return a representation of the account
     */
    @Operation
    public String createSubAccount(@Parameter(optional = true) String friendlyName) {
        return twilioClient.createSubAccount(friendlyName);
    }

    /**
     * Subaccounts in Twilio are just accounts that are "owned" by another account. Using a subaccount you can segment
     * each of your customers' use of Twilio and keep it separate from all the rest, allowing you to easily manage the
     * activity and resources of each customer independently.
     * <p/>
     * An Account resource is represented by the following properties:
     * <p/>
     * Sid	             A 34 character string that uniquely identifies this account.
     * DateCreated	     The date that this account was created, in GMT in RFC 2822 format
     * DateUpdated	     The date that this account was last updated, in GMT in RFC 2822 format.
     * FriendlyName	     A human readable description of this account, up to 64 characters long. By default the
     * FriendlyName is your email address.
     * Status	         The status of this account. Usually active, but can be suspended if you've been bad, or closed
     * if you've been horrible.
     * AuthToken	     The authorization token for this account. This token should be kept a secret, so no sharing.
     * Uri	            The URI for this resource, relative to https://api.twilio.com.
     * SubresourceUris	The list of subresources under this account.
     *
     * @param accoundSid the account sid to use in the query
     * @return a representation of the subaccount
     */
    @Operation
    public String getSubAccountByAccountSid(@Parameter String accoundSid) {
        return twilioClient.getSubAccountBySid(accoundSid);
    }

    /**
     * Subaccounts in Twilio are just accounts that are "owned" by another account. Using a subaccount you can segment
     * each of your customers' use of Twilio and keep it separate from all the rest, allowing you to easily manage the
     * activity and resources of each customer independently.
     * <p/>
     * For instance, if you are running a hosted service that relies on Twilio you can create a Twilio subaccount for
     * each customer that signs up. Then if a customer closes his or her account with your service, you can simply
     * deactivate the associated Twilio subaccount.
     * <p/>
     * An Account resource is represented by the following properties:
     * <p/>
     * Sid	            A 34 character string that uniquely identifies this account.
     * DateCreated	    The date that this account was created, in GMT in RFC 2822 format
     * DateUpdated	    The date that this account was last updated, in GMT in RFC 2822 format.
     * FriendlyName	    A human readable description of this account, up to 64 characters long. By default the
     * FriendlyName is your email address.
     * Status	        The status of this account. Usually active, but can be suspended if you've been bad, or closed
     * if you've been horrible.
     * AuthToken	    The authorization token for this account. This token should be kept a secret, so no sharing.
     * Uri	            The URI for this resource, relative to https://api.twilio.com.
     * SubresourceUris	The list of subresources under this account.
     *
     * @param friendlyName the friendly name to use in the query
     * @return a representation of the subaccount
     */
    @Operation
    public String getSubAccountByFriendlyName(@Parameter String friendlyName) {
        return twilioClient.getSubAccountByFriendlyName(friendlyName);
    }

    /**
     * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
     * <p/>
     * Each phone number instance has the following properties:
     * <p/>
     * FriendlyName	A nicely-formatted version of the phone number.
     * PhoneNumber	The phone number, in E.164 (i.e. "+1") format.
     * Lata	The LATA of this phone number.
     * RateCenter	The rate center of this phone number.
     * Latitude	The latitude coordinate of this phone number.
     * Longitude	The longitude coordinate of this phone number.
     * Region	The two-letter state or province abbreviation of this phone number.
     * PostalCode	The postal (zip) code of this phone number.
     * IsoCountry	The ISO country code of this phone number.
     *
     * @param accountSid     the account sid to use, leave empty to use {@link TwilioConnector#accountSid}
     * @param isoCountryCode a country code in ISO 3166-1 alpha-2 format (e.g. 'US' for United States, 'CA' for Canada).
     * @param areaCode       Find phone numbers in the specified Area Code. Only available for North American numbers.
     * @param contains       A pattern to match phone numbers on. Valid characters are '*' and [0-9a-zA-Z]. The '*' character will match any single digit.
     * @param inRegion       Limit results to a particular region (i.e. State/Province). Given a phone number, search within the same Region as that number.
     * @param inPostalCode   Limit results to a particular postal code. Given a phone number, search within the same postal code as that number.
     * @return a list of local AvailablePhoneNumber resource representations that match the specified filters
     */
    @Operation
    public String getAvailablePhoneNumbers(@Parameter(optional = true) String accountSid,
                                           @Parameter String isoCountryCode,
                                           @Parameter(optional = true) String areaCode,
                                           @Parameter(optional = true) String contains,
                                           @Parameter(optional = true) String inRegion,
                                           @Parameter(optional = true) String inPostalCode) {
        return twilioClient.getAvailablePhoneNumbers(accountSid, isoCountryCode, areaCode, contains, inRegion, inPostalCode);
    }

    /**
     * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
     * <p/>
     * <p/>
     * Each phone number instance has the following properties:
     * <p/>
     * FriendlyName	A nicely-formatted version of the phone number.
     * PhoneNumber	The phone number, in E.164 (i.e. "+1") format.
     * Lata	The LATA of this phone number.
     * RateCenter	The rate center of this phone number.
     * Latitude	The latitude coordinate of this phone number.
     * Longitude	The longitude coordinate of this phone number.
     * Region	The two-letter state or province abbreviation of this phone number.
     * PostalCode	The postal (zip) code of this phone number.
     * IsoCountry	The ISO country code of this phone number.
     *
     * @param accountSid      the account sid to use, leave empty to use {@link TwilioConnector#accountSid}
     * @param isoCountryCode  a country code in ISO 3166-1 alpha-2 format (e.g. 'US' for United States, 'CA' for Canada).
     * @param areaCode        Find phone numbers in the specified Area Code. Only available for North American numbers.
     * @param contains        A pattern to match phone numbers on. Valid characters are '*' and [0-9a-zA-Z]. The '*' character will match any single digit.
     * @param inRegion        Limit results to a particular region (i.e. State/Province). Given a phone number, search within the same Region as that number.
     * @param inPostalCode    Limit results to a particular postal code. Given a phone number, search within the same postal code as that number.
     * @param nearLatLong     Given a latitude/longitude pair lat,long find geographically close numbers within Distance miles.
     * @param nearPhoneNumber Given a phone number, find a geographically close number within Distance miles. Distance defaults to 25 miles.
     * @param inLata          Limit results to a specific Local access and transport area (LATA). Given a phone number, search within the same LATA as that number.
     * @param inRateCenter    Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires InLata to be set as well.
     * @param distance        Specifies the search radius for a Near- query in miles. If not specified this defaults to 25 miles.
     * @return a list of local AvailablePhoneNumber resource representations that match the specified filters
     */
    @Operation
    public String getAvailablePhoneNumbersAdvancedSeach(@Parameter(optional = true) String accountSid,
                                                        @Parameter String isoCountryCode,
                                                        @Parameter(optional = true) String areaCode,
                                                        @Parameter(optional = true) String contains,
                                                        @Parameter(optional = true) String inRegion,
                                                        @Parameter(optional = true) String inPostalCode,
                                                        @Parameter(optional = true) String nearLatLong,
                                                        @Parameter(optional = true) String nearPhoneNumber,
                                                        @Parameter(optional = true) String inLata,
                                                        @Parameter(optional = true) String inRateCenter,
                                                        @Parameter(optional = true) String distance) {
        return twilioClient.getAvailablePhoneNumbersAdvancedSeach(accountSid, isoCountryCode, areaCode, contains, inRegion, inPostalCode, nearLatLong, nearPhoneNumber, inLata, inRateCenter, distance);
    }

    /**
     * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
     * <p/>
     * Each phone number instance has the following properties:
     * <p/>
     * FriendlyName	A nicely-formatted version of the phone number.
     * PhoneNumber	The phone number, in E.164 (i.e. "+1") format.
     * Lata	The LATA of this phone number.
     * RateCenter	The rate center of this phone number.
     * Latitude	The latitude coordinate of this phone number.
     * Longitude	The longitude coordinate of this phone number.
     * Region	The two-letter state or province abbreviation of this phone number.
     * PostalCode	The postal (zip) code of this phone number.
     * IsoCountry	The ISO country code of this phone number.
     *
     * @param accountSid     the account sid to use, leave empty to use {@link TwilioConnector#accountSid}
     * @param isoCountryCode a country code in ISO 3166-1 alpha-2 format (e.g. 'US' for United States, 'CA' for Canada).
     * @param contains       A pattern to match phone numbers on. Valid characters are '*' and [0-9a-zA-Z]. The '*' character will match any single digit.
     * @return a list of toll-free AvailablePhoneNumber elements that match the specified filters
     */
    @Operation
    public String getAvailableTollFreeNumbers(@Parameter String accountSid,
                                              @Parameter String isoCountryCode,
                                              @Parameter(optional = true) String contains) {
        return twilioClient.getAvailableTollFreeNumbers(accountSid, isoCountryCode, contains);
    }

    /**
     * Returns an outgoing caller id instance matching the given filters.
     * <p/>
     * Each outgoing caller id instance has the following properies:
     * <p/>
     * Sid	A 34 character string that uniquely identifies this resource.
     * DateCreated	The date that this resource was created, given in RFC 2822 format.
     * DateUpdated	The date that this resource was last updated, given in RFC 2822 format.
     * FriendlyName	A human readable descriptive text for this resource, up to 64 characters long. By default, the FriendlyName is a nicely formatted version of the phone number.
     * AccountSid	The unique id of the Account responsible for this Caller Id.
     * PhoneNumber	The incoming phone number. Formatted with a '+' and country code e.g., +16175551212 (E.164 format).
     * Uri	The URI for this resource, relative to https://api.twilio.com.
     *
     * @param accoundSid          the account sid to use, leave empty to use {@link TwilioConnector#accountSid}
     * @param outgoingCallerIdSid the outgoing caller id sid to use in the query
     * @return an outgoing caller id instance matching the given filters.
     */
    @Operation
    public String getOutgoingCallerIdByOutgoingCallerIdSid(@Parameter(optional = true) String accoundSid,
                                                           @Parameter String outgoingCallerIdSid) {
        return twilioClient.getOutgoingCallerIdByOutgoingCallerIdSid(accoundSid, outgoingCallerIdSid);
    }

    /**
     * @param accoundSid
     * @param outgoingCallerIdSid
     * @param friendlyName
     * @return
     */
    @Operation
    public String updateOutgoingCallerIdByOutgoingCallerIdSid(@Parameter String accoundSid,
                                                              @Parameter String outgoingCallerIdSid,
                                                              @Parameter String friendlyName) {
        return twilioClient.updateOutgoingCallerIdByOutgoingCallerIdSid(accoundSid, outgoingCallerIdSid, friendlyName);
    }

    @Operation
    public String getAllOutgoingCallerIds(@Parameter String accountSid,
                                          @Parameter(optional = true) String phoneNumber,
                                          @Parameter(optional = true) String friendlyName) {
        return twilioClient.getAllOutgoingCallerIds(accountSid, phoneNumber, friendlyName);
    }

    @Operation
    public String addNewCallerId(@Parameter String accountSid,
                                 @Parameter String phoneNumber,
                                 @Parameter(optional = true) String friendlyName,
                                 @Parameter(optional = true) String callDelay,
                                 @Parameter(optional = true) String extension) {
        return twilioClient.addNewCallerId(accountSid, phoneNumber, friendlyName, callDelay, extension);
    }

    @Operation
    public String getIncomingPhoneNumbersByIncomingPhoneNumberSid(@Parameter String accountSid, @Parameter String incomingPhoneNumberSid) {
        return twilioClient.getIncomingPhoneNumbers(accountSid, incomingPhoneNumberSid);
    }

    @Operation
    public String updateIncomingPhoneNumbers(@Parameter String accountSid,
                                             @Parameter String incomingPhoneNumberSid,
                                             @Parameter(optional = true) String friendlyName,
                                             @Parameter(optional = true) String apiVersion,
                                             @Parameter(optional = true) String voiceUrl,
                                             @Parameter(optional = true) String voiceMethod,
                                             @Parameter(optional = true) String voiceFallbackUrl,
                                             @Parameter(optional = true) String voiceFallbackMethod,
                                             @Parameter(optional = true) String statusCallback,
                                             @Parameter(optional = true) String statusCallbackMethod,
                                             @Parameter(optional = true) String voiceCallerIdLookup,
                                             @Parameter(optional = true) String voiceApplicationSid,
                                             @Parameter(optional = true) String smsUrl,
                                             @Parameter(optional = true) String smsMethod,
                                             @Parameter(optional = true) String smsFallbackUrl,
                                             @Parameter(optional = true) String smsFallbackMethod,
                                             @Parameter(optional = true) String smsApplicationSid,
                                             @Parameter(optional = true) String accountSidDestination) {
        return twilioClient.updateIncomingPhoneNumbers(accountSid, incomingPhoneNumberSid, friendlyName, apiVersion, voiceUrl, voiceMethod, voiceFallbackUrl,
                voiceFallbackMethod, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceApplicationSid, smsUrl, smsMethod, smsFallbackUrl,
                smsFallbackMethod, smsApplicationSid, accountSidDestination);
    }

    @Operation
    public String deleteIncomingPhoneNumber(@Parameter String accountSid) {
        return twilioClient.deleteIncomingPhoneNumber(accountSid);
    }

    @Operation
    public String getIncomingPhoneNumbers(@Parameter String accountSid,
                                          @Parameter(optional = true) String phoneNumber,
                                          @Parameter(optional = true) String friendlyName) {
        return twilioClient.getIncomingPhoneNumbers(accountSid, phoneNumber, friendlyName);
    }

    @Operation
    public String addIncomingPhoneNumberByPhoneNumber(@Parameter String accountSid,
                                                      @Parameter String phoneNumber,
                                                      @Parameter(optional = true) String friendlyName,
                                                      @Parameter(optional = true) String voiceUrl,
                                                      @Parameter(optional = true) String voiceMethod,
                                                      @Parameter(optional = true) String voiceFallbackUrl,
                                                      @Parameter(optional = true) String voiceFallbackMethod,
                                                      @Parameter(optional = true) String statusCallback,
                                                      @Parameter(optional = true) String statusCallbackMethod,
                                                      @Parameter(optional = true) String voiceCallerIdLookup,
                                                      @Parameter(optional = true) String voiceApplicationSid,
                                                      @Parameter(optional = true) String smsUrl,
                                                      @Parameter(optional = true) String smsMethod,
                                                      @Parameter(optional = true) String smsFallbackUrl,
                                                      @Parameter(optional = true) String smsFallbackMethod,
                                                      @Parameter(optional = true) String smsApplicationSid) {
        return twilioClient.addIncomingPhoneNumberByPhoneNumber(accountSid, phoneNumber, friendlyName, voiceUrl, voiceMethod, voiceFallbackUrl, voiceFallbackMethod,
                statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceApplicationSid, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod, smsApplicationSid);
    }

    @Operation
    public String addIncomingPhoneNumberByAreaCode(@Parameter String accountSid,
                                                   @Parameter String areaCode,
                                                   @Parameter(optional = true) String friendlyName,
                                                   @Parameter(optional = true) String voiceUrl,
                                                   @Parameter(optional = true) String voiceMethod,
                                                   @Parameter(optional = true) String voiceFallbackUrl,
                                                   @Parameter(optional = true) String voiceFallbackMethod,
                                                   @Parameter(optional = true) String statusCallback,
                                                   @Parameter(optional = true) String statusCallbackMethod,
                                                   @Parameter(optional = true) String voiceCallerIdLookup,
                                                   @Parameter(optional = true) String voiceApplicationSid,
                                                   @Parameter(optional = true) String smsUrl,
                                                   @Parameter(optional = true) String smsMethod,
                                                   @Parameter(optional = true) String smsFallbackUrl,
                                                   @Parameter(optional = true) String smsFallbackMethod,
                                                   @Parameter(optional = true) String smsApplicationSid) {
        return twilioClient.addIncomingPhoneNumberByAreaCode(accountSid, areaCode, friendlyName, voiceUrl, voiceMethod, voiceFallbackUrl, voiceFallbackMethod,
                statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceApplicationSid, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod, smsApplicationSid);
    }

    @Operation
    public String getApplication(@Parameter String accountSid, @Parameter String applicationSid) {
        return twilioClient.getApplication(accountSid, applicationSid);

    }

    @Operation
    public String updateApplication(@Parameter String accountSid,
                                    @Parameter String applicationSid,
                                    @Parameter(optional = true) String friendlyName,
                                    @Parameter(optional = true) String apiVersion,
                                    @Parameter(optional = true) String voiceUrl,
                                    @Parameter(optional = true) String voiceMethod,
                                    @Parameter(optional = true) String voiceFallbackUrl,
                                    @Parameter(optional = true) String voiceFallbackMethod,
                                    @Parameter(optional = true) String statusCallback,
                                    @Parameter(optional = true) String statusCallbackMethod,
                                    @Parameter(optional = true) String voiceCallerIdLookup,
                                    @Parameter(optional = true) String voiceApplicationSid,
                                    @Parameter(optional = true) String smsUrl,
                                    @Parameter(optional = true) String smsMethod,
                                    @Parameter(optional = true) String smsFallbackUrl,
                                    @Parameter(optional = true) String smsFallbackMethod,
                                    @Parameter(optional = true) String smsStatusCallback) {
        return twilioClient.updateApplication(accountSid, applicationSid, friendlyName, apiVersion, voiceUrl, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, statusCallback, statusCallbackMethod, voiceCallerIdLookup,
                smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod, smsStatusCallback);
    }

    @Operation
    public String deleteApplication(@Parameter String accountSid, @Parameter String applicationSid) {
        return twilioClient.deleteApplication(accountSid, applicationSid);
    }

    @Operation
    public String getAllApplications(@Parameter String accountSid, @Parameter(optional = true) String friendlyName) {
        return twilioClient.getAllApplications(accountSid, friendlyName);
    }

    @Operation
    public String createApplication(@Parameter String accountSid,
                                    @Parameter String friendlyName,
                                    @Parameter(optional = true) String apiVersion,
                                    @Parameter(optional = true) String voiceUrl,
                                    @Parameter(optional = true) String voiceMethod,
                                    @Parameter(optional = true) String voiceFallbackUrl,
                                    @Parameter(optional = true) String voiceFallbackMethod,
                                    @Parameter(optional = true) String statusCallback,
                                    @Parameter(optional = true) String statusCallbackMethod,
                                    @Parameter(optional = true) String voiceCallerIdLookup,
                                    @Parameter(optional = true) String smsUrl,
                                    @Parameter(optional = true) String smsMethod,
                                    @Parameter(optional = true) String smsFallbackUrl,
                                    @Parameter(optional = true) String smsFallbackMethod,
                                    @Parameter(optional = true) String smsStatusCallback) {
        return twilioClient.createApplication(accountSid, friendlyName, apiVersion, voiceUrl, voiceMethod,
                voiceFallbackUrl, voiceFallbackMethod, statusCallback, statusCallbackMethod, voiceCallerIdLookup, smsUrl,
                smsMethod, smsFallbackUrl, smsFallbackMethod, smsStatusCallback);
    }

    @Operation
    public String getCall(@Parameter String accountSid, @Parameter String callSid) {
        return twilioClient.getCall(accountSid, callSid);
    }

    @Operation
    public String getCalls(@Parameter String accountSid,
                           @Parameter(optional = true) String to,
                           @Parameter(optional = true) String from,
                           @Parameter(optional = true) String status,
                           @Parameter(optional = true) String startTime) {
        return twilioClient.getCalls(accountSid, to, from, status, startTime);
    }

    @Operation
    public String makeCall(@Parameter String accountSid,
                           @Parameter String from,
                           @Parameter String to,
                           @Parameter(optional = true) String url,
                           @Parameter(optional = true) String applicationSid,
                           @Parameter(optional = true) String method,
                           @Parameter(optional = true) String fallbackUrl,
                           @Parameter(optional = true) String fallbackMethod,
                           @Parameter(optional = true) String statusCallback,
                           @Parameter(optional = true) String statusCallbackMethod,
                           @Parameter(optional = true) String sendDigits,
                           @Parameter(optional = true) String ifMachine,
                           @Parameter(optional = true) String timeout) {
        return twilioClient.makeCall(accountSid, from, to, url, applicationSid, method, fallbackUrl, fallbackMethod, statusCallback, statusCallbackMethod, sendDigits, ifMachine, timeout);
    }

    @Operation
    public String changeCallState(@Parameter String accountSid,
                                  @Parameter String callSid,
                                  @Parameter(optional = true) String url,
                                  @Parameter(optional = true) String method,
                                  @Parameter(optional = true) String status) {
        return twilioClient.changeCallState(accountSid, callSid, url, method, status);
    }

    @Operation
    public String getConference(@Parameter String accountSid, @Parameter String conferenceSid) {
        return twilioClient.getConference(accountSid, conferenceSid);
    }

    @Operation
    public String getConferences(@Parameter String accountSid,
                                 @Parameter(optional = true) String status,
                                 @Parameter(optional = true) String friendlyName,
                                 @Parameter(optional = true) String dateCreated,
                                 @Parameter(optional = true) String dateUpdated) {
        return twilioClient.getConferences(accountSid, status, friendlyName, dateCreated, dateUpdated);
    }

    @Operation
    public String getParticipant(@Parameter String accountSid,
                                 @Parameter String conferenceSid,
                                 @Parameter String callSid) {
        return twilioClient.getParticipant(accountSid, conferenceSid, callSid);
    }

    @Operation
    public String updateParticipantStatus(@Parameter String accountSid,
                                          @Parameter String conferenceSid,
                                          @Parameter String callSid,
                                          @Parameter Boolean muted) {
        return twilioClient.updateParticipantStauts(accountSid, conferenceSid, callSid, muted);

    }

    @Operation
    public String deleteParticipant(@Parameter String accountSid,
                                    @Parameter String conferenceSid,
                                    @Parameter String callSid) {
        return twilioClient.deleteParticipant(accountSid, conferenceSid, callSid);
    }

    @Operation
    public String getParticipants(@Parameter String accountSid,
                                  @Parameter String conferenceSid,
                                  @Parameter(optional = true) Boolean muted) {
        return twilioClient.getParticipants(accountSid, conferenceSid, muted);
    }

    @Operation
    public String getSmsMessage(@Parameter String accountSid, @Parameter String smsMessageSid) {
        return twilioClient.getSmsMessage(accountSid, smsMessageSid);
    }

    @Operation
    public String getAllSmsMessages(@Parameter String accountSid,
                                    @Parameter(optional = true) String to,
                                    @Parameter(optional = true) String from,
                                    @Parameter(optional = true) String dateSent) {
        return twilioClient.getAllSmsMessages(accountSid, to, from, dateSent);
    }

    @Operation
    public String sendSmsMessage(@Parameter String accountSid,
                                 @Parameter String from,
                                 @Parameter String to,
                                 @Parameter String body,
                                 @Parameter(optional = true) String statusCallback,
                                 @Parameter(optional = true) String applicationSid) {
        return twilioClient.sendSmsMessage(accountSid, from, to, body, statusCallback, applicationSid);
    }

    @Operation
    public String getRecording(@Parameter String accountSid,
                               @Parameter String recordingSid,
                               @Parameter RecordingType recordingType) {
        return twilioClient.getRecording(accountSid, recordingSid, recordingType);
    }

    @Operation
    public String deleteRecording(@Parameter String accountSid, @Parameter String recordingSid) {
        return twilioClient.deleteRecording(accountSid, recordingSid);

    }

    @Operation
    public String getRecordings(@Parameter String accountSid,
                                @Parameter(optional = true) String callSid,
                                @Parameter(optional = true) String dateCreated) {
        return twilioClient.getRecordings(accountSid, callSid, dateCreated);
    }

    @Operation
    public String getTranscriptionByTranscriptionSid(@Parameter String accountSid,
                                                     @Parameter String transcriptionSid,
                                                     @Parameter TranscriptionFormat transcriptionFormat) {
        return twilioClient.getTranscriptionByTranscriptionSid(accountSid, transcriptionSid, transcriptionFormat);
    }

    @Operation
    public String getTranscriptionByRecordingSid(@Parameter String accountSid,
                                                 @Parameter String recordingSid,
                                                 @Parameter TranscriptionFormat transcriptionFormat) {
        return twilioClient.getTranscriptionByRecordingSid(accountSid, recordingSid, transcriptionFormat);
    }

    /**
     * A Notification instance resource represents a single log entry made by Twilio in the course of handling your calls or your use of the REST API. It is very useful for debugging purposes. The Notifications list resource represents the set of notifications generated for an account.
     * <p/>
     * For convenience, a Notifications list resource is also available as a subresource of a Call instance resource. This nresource is scoped to an individual call, so that you can navigate directly from a call to the notifications generated from that call.
     * <p/>
     * A Notification resource is represented by the following properties:
     * <p/>
     * Sid	A 34 character string that uniquely identifies this resource.
     * DateCreated	The date that this resource was created, given in RFC 2822 format.
     * DateUpdated	The date that this resource was last updated, given in RFC 2822 format.
     * AccountSid	The unique id of the Account responsible for this notification.
     * CallSid	CallSid is the unique id of the call during which the notification was generated. Empty if the notification was generated by the REST API without regard to a specific phone call.
     * ApiVersion	The version of the Twilio in use when this notification was generated.
     * Log	An integer log level corresponding to the type of notification: 0 is ERROR, 1 is WARNING.
     * ErrorCode	A unique error code for the error condition. You can lookup errors, with possible causes and solutions, in our Error Dictionary.
     * MoreInfo	A URL for more information about the error condition. The URL is a page in our Error Dictionary.
     * MessageText	The text of the notification.
     * MessageDate	The date the notification was actually generated, given in RFC 2822 format. Due to buffering, this may be slightly different than the DateCreated date.
     * RequestUrl	The URL of the resource that generated the notification.
     * If the notification was generated during a phone call:
     * This is the URL of the resource on YOUR SERVER that caused the notification.
     * If the notification was generated by your use of the REST API:
     * This is the URL of the REST resource you were attempting to request on Twilio's servers.
     * RequestMethod	The HTTP method in use for the request that generated the notification.
     * If the notification was generated during a phone call:
     * The HTTP Method use to request the resource on your server.
     * If the notification was generated by your use of the REST API:
     * This is the HTTP method used in your request to the REST resource on Twilio's servers.
     * RequestVariables	The Twilio-generated HTTP GET or POST variables sent to your server. Alternatively, if the notification was generated by the REST API, this field will include any HTTP POST or PUT variables you sent to the REST API.
     * ResponseHeaders	The HTTP headers returned by your server.
     * ResponseBody	The HTTP body returned by your server.
     * Uri	The URI for this resource, relative to https://api.twilio.com
     *
     * @param accountSid
     * @param notificationSid
     * @return
     */
    @Operation
    public String getNotification(@Parameter String accountSid, @Parameter String notificationSid) {
        return twilioClient.getNotification(accountSid, notificationSid);
    }

    /**
     * Deletes the notification identified by {NotificationSid} from an account's log.
     *
     * @param accountSid
     * @param notificationSid
     * @return If successful, returns HTTP status 204 (No Content) with no body.
     */
    @Operation
    public String deleteNotification(@Parameter String accountSid, @Parameter String notificationSid) {
        return twilioClient.deleteNotification(accountSid, notificationSid);
    }

    /**
     * Returns a list of notifications generated for an account. The list includes paging information and is sorted by DateUpdated, with most recent notifications first.
     *
     * @param accountSid
     * @param log         An integer log level corresponding to the type of notification: 0 is ERROR, 1 is WARNING.
     * @param messageDate Only show notifications for this date. Should be formatted as YYYY-MM-DD. You can also specify inequality, such as MessageDate<=YYYY-MM-DD for messages logged at or before midnight on a date, and MessageDate>=YYYY-MM-DD for messages logged at or after midnight on a date.
     * @return a list of notifications generated for an account
     */
    @Operation
    public String getNotifications(@Parameter String accountSid,
                                   @Parameter(optional = true) Integer log,
                                   @Parameter(optional = true) String messageDate) {
        return twilioClient.getNotifications(accountSid, log, messageDate);
    }

    @Operation
    public String getNotificationsByCallSid(@Parameter String accountSid,
                                            @Parameter String callSid,
                                            @Parameter(optional = true) String log,
                                            @Parameter(optional = true) String messageDate) {
        return twilioClient.getNotificationsByCallSid(accountSid, callSid, log, messageDate);
    }

    /**
     * Returns the Sandbox resource associated with the account identified by {YourAccountSid}. Twilio accounts upgraded prior to February 2010 may not have a Sandbox resource, and in this case you will receive a 404 (Not Found) response.
     * <p/>
     * The Sandbox resource gives you programatic access to your Twilio Developer Sandbox phone number. Using this resource you can get the phone number and PIN for your sandbox, view the current voice and SMS URLs and update those URLs just like any other IncomingPhoneNumber resource on a Full Twilio Account.
     * <p/>
     * The Sandbox resource is represented by the following properties:
     * <p/>
     * Property	Description
     * Pin	An 8 digit number that gives access to this sandbox.
     * AccountSid	The unique id of the Account connected to this sandbox.
     * PhoneNumber	The phone number of the sandbox. Formatted with a '+' and country code e.g., +16175551212 (E.164 format).
     * VoiceUrl	The URL Twilio will request when the sandbox number is called.
     * VoiceMethod	The HTTP method to use when requesting the above URL. Either GET or POST.
     * SmsUrl	The URL Twilio will request when receiving an incoming SMS message to the sandbox number.
     * SmsMethod	The HTTP method to use when requesting the sms URL. Either GET or POST.
     * DateCreated	The date that this resource was created, given in RFC 2822 format.
     * DateUpdated	The date that this resource was last updated, given in RFC 2822 format.
     * Uri	The URI for this resource, relative to https://api.twilio.com
     *
     * @param accountSid
     * @return the Sandbox resource associated with the account identified by {YourAccountSid}. Twilio accounts upgraded prior to February 2010 may not have a Sandbox resource, and in this case you will receive a 404 (Not Found) response.
     */
    @Operation
    public String getSandbox(@Parameter String accountSid) {
        return twilioClient.getSandbox(accountSid);
    }

    /**
     * You can POST to the Sandbox resource to update the TwiML voice and SMS URLs associated with the sandbox number.
     * <p/>
     * <p/>
     * The Sandbox resource gives you programatic access to your Twilio Developer Sandbox phone number. Using this resource you can get the phone number and PIN for your sandbox, view the current voice and SMS URLs and update those URLs just like any other IncomingPhoneNumber resource on a Full Twilio Account.
     * <p/>
     * The Sandbox resource is represented by the following properties:
     * <p/>
     * Property	Description
     * Pin	An 8 digit number that gives access to this sandbox.
     * AccountSid	The unique id of the Account connected to this sandbox.
     * PhoneNumber	The phone number of the sandbox. Formatted with a '+' and country code e.g., +16175551212 (E.164 format).
     * VoiceUrl	The URL Twilio will request when the sandbox number is called.
     * VoiceMethod	The HTTP method to use when requesting the above URL. Either GET or POST.
     * SmsUrl	The URL Twilio will request when receiving an incoming SMS message to the sandbox number.
     * SmsMethod	The HTTP method to use when requesting the sms URL. Either GET or POST.
     * DateCreated	The date that this resource was created, given in RFC 2822 format.
     * DateUpdated	The date that this resource was last updated, given in RFC 2822 format.
     * Uri	The URI for this resource, relative to https://api.twilio.com
     *
     * @param accountSid
     * @param voiceUrl    The URL that Twilio should request when somebody calls this sandbox.
     * @param voiceMethod The HTTP method that should be used to request the above URL. Must be either GET or POST. Defaults to POST.
     * @param smsUrl      The URL that Twilio should request when somebody sends an SMS to the sandbox.
     * @param smsMethod   The HTTP method that should be used to request the SmsUrl. Must be either GET or POST. Defaults to POST.
     * @return If successful, Twilio responds with an updated representation of the sandbox.
     */
    @Operation
    public String updateSandbox(@Parameter String accountSid,
                                @Parameter(optional = true) String voiceUrl,
                                @Parameter(optional = true) String voiceMethod,
                                @Parameter(optional = true) String smsUrl,
                                @Parameter(optional = true) String smsMethod) {
        return twilioClient.updateSandbox(accountSid, voiceUrl, voiceMethod, smsUrl, smsMethod);
    }

    public String getAccountSid() {
        return accountSid;
    }

    public void setAccountSid(String accountSid) {
        this.accountSid = accountSid;
    }

    public String getAuthToken() {
        return authToken;
    }

    public void setAuthToken(String authToken) {
        this.authToken = authToken;
    }
}